[versions]
flyway = "10.11.0"
hoplite = "2.9.0"
http4k = "6.15.0.1"
jackson = "2.19.1"
jdbi = "3.49.5"
jupiter = "5.13.1"
kasechange = "1.4.1"
kotest = "5.9.1"
kotlin-core = "2.1.21"
kotlin-coroutines = "1.10.2"
okhttp = "4.12.0"
postgresql = "42.7.7"
resilience4j = "2.3.0"
spotless = "7.0.4"
otel = "1.51.0"
slf4j = "2.0.17"
logback = "1.5.18"
logback-encoder = "8.1"
kafka = "3.9.0"
rocksdb = "10.2.1"
versions = "0.52.0"

[libraries]
flyway-database-postgresql = { module = "org.flywaydb:flyway-database-postgresql", version.ref = "flyway" }

postgresql = { module = "org.postgresql:postgresql", version.ref = "postgresql" }

hoplite-core = { module = "com.sksamuel.hoplite:hoplite-core", version.ref = "hoplite" }
hoplite-hocon = { module = "com.sksamuel.hoplite:hoplite-hocon", version.ref = "hoplite" }

http4k-core = { module = "org.http4k:http4k-core", version.ref = "http4k" }
http4k-open-api = { module = "org.http4k:http4k-api-openapi", version.ref = "http4k" }
http4k-format-jackson = { module = "org.http4k:http4k-format-jackson", version.ref = "http4k" }
http4k-server-undertow = { module = "org.http4k:http4k-server-undertow", version.ref = "http4k" }
http4k-websocket-client = { module = "org.http4k:http4k-client-websocket", version.ref = "http4k" }

jackson-databind = { module = "com.fasterxml.jackson.core:jackson-databind", version.ref = "jackson" }
jackson-jdk8 = { module = "com.fasterxml.jackson.datatype:jackson-datatype-jdk8", version.ref = "jackson" }
jackson-jsr310 = { module = "com.fasterxml.jackson.datatype:jackson-datatype-jsr310", version.ref = "jackson" }
jackson-kotlin = { module = "com.fasterxml.jackson.module:jackson-module-kotlin", version.ref = "jackson" }

jdbi-core = { module = "org.jdbi:jdbi3-core", version.ref = "jdbi" }
jdbi-kotlin = { module = "org.jdbi:jdbi3-kotlin", version.ref = "jdbi" }
jdbi-postgres = { module = "org.jdbi:jdbi3-postgres", version.ref = "jdbi" }

jupiter-api = { module = "org.junit.jupiter:junit-jupiter-api", version.ref = "jupiter" }
jupiter-engine = { module = "org.junit.jupiter:junit-jupiter-engine", version.ref = "jupiter" }
jupiter-params = { module = "org.junit.jupiter:junit-jupiter-params", version.ref = "jupiter" }

kasechange = { module = "net.pearx.kasechange:kasechange", version.ref = "kasechange" }

kotest-assertions-core = { module = "io.kotest:kotest-assertions-core", version.ref = "kotest" }
kotest-assertions-json = { module = "io.kotest:kotest-assertions-json", version.ref = "kotest" }
kotest-extensions = { module = "io.kotest:kotest-extensions", version.ref = "kotest" }
kotest-runner-junit5 = { module = "io.kotest:kotest-runner-junit5", version.ref = "kotest" }
kotest-property = { module = "io.kotest:kotest-property-jvm", version.ref = "kotest" }

kotlin-coroutines = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "kotlin-coroutines" }

okhttp = { module = "com.squareup.okhttp3:okhttp", version.ref = "okhttp" }
okhttp-mock-server = { module = "com.squareup.okhttp3:mockwebserver", version.ref = "okhttp" }

resilience4j-kotlin = { module = "io.github.resilience4j:resilience4j-kotlin", version.ref = "resilience4j" }
resilience4j-timelimiter = { module = "io.github.resilience4j:resilience4j-timelimiter", version.ref = "resilience4j" }
resilience4j-retry = { module = "io.github.resilience4j:resilience4j-retry", version.ref = "resilience4j" }

otel-api = { module = "io.opentelemetry:opentelemetry-api", version.ref = "otel" }
otel-sdk = { module = "io.opentelemetry:opentelemetry-sdk", version.ref = "otel" }
otel-autoconfigure = { module = "io.opentelemetry:opentelemetry-sdk-extension-autoconfigure", version.ref = "otel" }
otel-logging = { module = "io.opentelemetry:opentelemetry-exporter-logging", version.ref = "otel" }
otel-logging-otlp = { module = "io.opentelemetry:opentelemetry-exporter-logging-otlp", version.ref = "otel" }
otel-sdk-metrics = { module = "io.opentelemetry:opentelemetry-sdk-metrics", version.ref = "otel" }
otel-sdk-testing = { module = "io.opentelemetry:opentelemetry-sdk-testing", version.ref = "otel" }

slf4j = { module = "org.slf4j:slf4j-api", version.ref = "slf4j" }
logback-classic = { module = "ch.qos.logback:logback-classic", version.ref = "logback" }
logback-encoder = { module = "net.logstash.logback:logstash-logback-encoder", version.ref = "logback-encoder" }

kafka-client = { module = "org.apache.kafka:kafka-clients", version.ref = "kafka" }

rocksdb = { module = "org.rocksdb:rocksdbjni", version.ref = "rocksdb" }

[bundles]
hoplite = [
    "hoplite-core",
    "hoplite-hocon",
]

http4k = [
    "http4k-core",
    "http4k-open-api", 
    "http4k-format-jackson",
    "http4k-server-undertow",
    "http4k-websocket-client",
]

jackson = [
    "jackson-databind",
    "jackson-jdk8",
    "jackson-jsr310",
    "jackson-kotlin",
]

jdbi = [
    "jdbi-core",
    "jdbi-kotlin",
    "jdbi-postgres",
]

jupiter = [
    "jupiter-api",
    "jupiter-engine",
    "jupiter-params",
]

testing = [
    "jupiter-api",
    "jupiter-engine", 
    "jupiter-params",
    "kotest-assertions-core",
    "kotest-runner-junit5",
    "kotest-property",
    "kotest-assertions-json",
    "kotest-extensions",
]

resilience4j = [
    "resilience4j-timelimiter",
    "resilience4j-kotlin"
]

otel-testing = [
    "otel-sdk",
    "otel-autoconfigure",
    "otel-logging",
    "otel-logging-otlp",
    "otel-sdk-metrics",
    "otel-sdk-testing"
]

logging = [
    "logback-classic",
    "logback-encoder",
    "slf4j"
]

[plugins]
flyway = { id = "org.flywaydb.flyway", version.ref = "flyway" }
versions = { id = "com.github.ben-manes.versions", version.ref = "versions" }
